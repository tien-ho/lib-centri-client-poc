import sbt.Keys._
import Dependencies._

rallyVersioningSnapshotLowerBound in ThisBuild := "8.0.0"

organizationName in ThisBuild := "Rally Health"
organization in ThisBuild := "com.rallyhealth.optum"

resolvers in ThisBuild += rallyArtifactoryLibSnapshotsResolver.value

scalacOptions in ThisBuild ++= Seq(
  "-Xfatal-warnings",
  "-feature",
  "-deprecation",
  "-Xlint"
)

lazy val `lib-optum-mempe-play25` = (project in file("."))
  .enablePlugins(SemVerPlugin, RallyShadingPlugin)
  .configs(config("it") extend Test)
  .settings(Defaults.itSettings: _*)
  .settings(generateVersion)
  .settings(
    libraryDependencies ++= Seq(
      // app dependencies, keep alpha
      Ext.logback,
      Ext.scalaLogging,
      Rally.libCarestats,
      Rally.libEnigmaPlay25,
      Rally.libRallyRqClientApi,
      Rally.libRallyRqClientBuilder,
      Rally.libRallyRqClientLogging,
      Rally.libRallyRqClientPlay25,
      Rally.libSpartanPlay25Json,
      Ext.playCache,

      // test dependencies, keep alpha
      Ext.mockito,
      Ext.scalaTestPlay25,
      Rally.libRallyRqClientTest,
      Rally.scalacheckOps
    )
  )

// Disable publishing the jars produced by `test:package`. This can be enabled in the future if we are sure we need it
publishArtifact in(Test, packageBin) in ThisBuild := false
publishArtifact in(Test, packageSrc) in ThisBuild := false

// generates the rally-version.properties file, we don't want to use the RallyPlayPlugin because this isn't
// a play app, it's a library.
def generateVersion = resourceGenerators in Compile <+=
  (resourceManaged in Compile, version, name) map { (dir, ver, name) =>
    val log = ConsoleLogger()
    val props = new java.util.Properties()
    props.setProperty("Version", ver)
    props.setProperty("Name", name)
    props.setProperty("Created", System.currentTimeMillis().toString)

    val file = dir / s"rally-version-$name.properties"
    log.info(s"Writing version file $file")
    IO.write(props, "generated by sbt", file)
    Seq(file)
  }
